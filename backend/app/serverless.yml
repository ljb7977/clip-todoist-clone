# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: todoist # NOTE: update this with your service name
#app: your-app-name
#tenant: your-tenant-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"
custom:
  bucket: clip-todoist

provider:
  name: aws
  runtime: python3.7
  region: ap-northeast-2
  stage: dev
  iamRoleStatements:
    - Effect: 'Allow'
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:ap-northeast-2:*:*"
    - Effect: Allow # For Lamda Layer
      Action:
        - s3:PutObject
        - s3:GetObject
      Resource: "arn:aws:s3:::${self:custom.bucket}/*"
    

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#  exclude:
#    - exclude-me.py
#    - exclude-me-dir/**

functions:
  hello:
    handler: handler.hello
    events:
      - http:
         path: hello
         method: get
         cors: true
    
  signup:
    handler: user.signup
    events:
      - http:
         path: users/signup
         method: post
         cors: true
    layers:
       # Ref name is generated by TitleCasing the layer name & appending LambdaLayer
      - arn:aws:lambda:ap-northeast-2:177407442251:layer:crypto:8
  signin:
    handler: user.signin
    events:
      - http:
         path: users/signin
         method: post
         cors: true
    layers:
       # Ref name is generated by TitleCasing the layer name & appending LambdaLayer
      - arn:aws:lambda:ap-northeast-2:177407442251:layer:crypto:8
  user-get:
    handler: user.get
    events:
     - http:
         path: users
         method: get
         cors: true

#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# layers:
#   crypto:
#     path: ../layers/crypto
#     description: for user signin and signup
#     compatibleRuntimes: 
#       - python3.7

